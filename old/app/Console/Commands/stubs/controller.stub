<?php

namespace {{ namespace }};

use {{ rootNamespace }}Http\Controllers\Controller;
use App\Services\serviceNamespaceService;
use App\Http\Requests\serviceNamespaceRequest;
use App\Services\Backend\User\UserService;
use Exception;
use Illuminate\Contracts\Foundation\Application;
use Illuminate\Contracts\View\Factory;
use Illuminate\Contracts\View\View;
use Illuminate\Http\Request;
use Illuminate\Http\RedirectResponse;
use Log;
use Utility;

/**
 * Class {{ class }}
 * @package {{ namespace }}
 */
class {{ class }} extends Controller
{
    /**
     * @var serviceNameService
     */
    private $serviceVariableService;

    /**
     * @var UserService
     */
    private $userService;

    /**
     * {{ class }} constructor.
     * @param serviceNameService $serviceVariableService
     */
    public function __construct(UserService $userService, serviceNameService $serviceVariableService)
    {
        $this->userService = $userService;
        $this->serviceVariableService = $serviceVariableService;
    }

    /**
     * Display a listing of the resource.
     *
     * @param Request $request
     *
     * @return Application|Factory|View
     */
    public function index(Request $request)
    {

        $inputs = $request->query();
        $filters = array_merge($inputs, $this->dateRangePicker($inputs));

        return view('view_path.index', [
            'serviceVariables' => $this->serviceVariableService->getAllserviceName($filters),
            'inputs' => $this->dateRangePicker($inputs)
        ]);

    }

    /**
     * Show the form for creating a new resource.
     *
     * @return Application|Factory|View
     */
    public function create(): View
    {
        return view('view_path.create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  serviceNameRequest $serviceVariableRequest
     * @return RedirectResponse
     */
    public function store(serviceNameRequest $serviceVariableRequest): RedirectResponse
    {
        try {
            $serviceVariable = [
                'serviceVariable_status' => \Utility::$statusText[$serviceVariableRequest->status],
            ];

            $this->serviceVariableService->storeserviceName($serviceVariable);
            flash('serviceName created successfully', 'success');
            return redirect()->route('serviceVariables.index');

        } catch (\Exception $exception) {
            \Log::error($exception->getMessage());
            flash('Failed to create new serviceName!', 'error');
            return redirect()->back()->withInput($serviceVariableRequest->all());
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return Application|Factory|View
     */
    public function show($id)
    {
        try {
            $serviceVariable = $this->serviceVariableService->showserviceNameByID($id);

            return view('view_path.show', [
                'serviceVariable' => $serviceVariable
         ]);

        } catch (Exception $exception) {

            Log::error($exception->getMessage());
            flash('serviceName Not Found', 'error');
            return redirect()->route('serviceVariables.index');
        }
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return Application|Factory|View
     */
    public function edit($id)
    {
         try {
             $serviceVariable = $this->serviceVariableService->showserviceNameByID($id);
             return view('view_path.edit', [
                 'serviceVariable' => $serviceVariable
            ]);
         } catch (Exception $exception) {

             Log::error($exception->getMessage());
             flash('serviceName Not Found', 'error');
             return redirect()->route('serviceVariables.index');
         }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  serviceNameRequest $serviceVariableRequest
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(serviceNameRequest $serviceVariableRequest, $id)
    {
          try {
              $serviceVariable = [
                  'serviceVariable_status' => \Utility::$statusText[$serviceVariableRequest->status],
              ];

              $this->serviceVariableService->updateserviceName($serviceVariable);
              flash('serviceName Updated successfully', 'success');
              return redirect()->route('serviceVariables.index');

          } catch (\Exception $exception) {
              \Log::error($exception->getMessage());
              flash('Failed to update serviceName!', 'error');
              return redirect()->back()->withInput($serviceVariableRequest->all());
          }
    }

/**
     * Remove the specified resource from storage.
     *
     * @param int $id
     * @return RedirectResponse
     */
    public function destroy(int $id): RedirectResponse
    {
        $user_get = $this->userService->whoIS($_REQUEST);
        if (isset($user_get) && isset($user_get->id) && $user_get->id == auth()->user()->id) {
            try {
                $serviceVariable = $this->serviceVariableService->showserviceNameByID($id);
                   $serviceVariable->delete();
                   flash('Book serviceName deleted successfully', 'success');

            } catch (Exception $exception) {
                Log::error($exception->getMessage());
                flash('serviceName not found!')->error();
            }
        } else {
            flash('You Entered Wrong Password!')->error();
        }
        return redirect()->route('serviceVariables.index');
    }

        /**
         * @param Request $request
         * @return Application|Factory|View|RedirectResponse
         * @throws Exception
         */
        public function pdf(Request $request)
        {
            try {
                $inputs = $request->query();
                $filters = array_merge($inputs, $this->dateRangePicker($inputs));

                return view('view_path.pdf', [
                    'serviceVariables' => $this->serviceVariableService->getAllserviceName($filters)->get()
                ]);
            } catch (Exception $exception) {
                Log::error($exception->getMessage());
                flash('No serviceNames Found For Export');
                return redirect()->route('books.index');
            }
        }

        /**
         * @param Request $request
         * @return Application|Factory|View|RedirectResponse
         */
        public
        function excel(Request $request)
        {
            try {
                 $inputs = $request->query();
                 $filters = array_merge($inputs, $this->dateRangePicker($inputs));

                 return view('view_path.excel', [
                     'serviceVariables' => $this->serviceVariableService->getAllserviceName($filters)->get()
                 ]);
            } catch (Exception $exception) {
                Log::error($exception->getMessage());
                flash('No serviceNames Found For Export');
                return redirect()->route('books.index');
            }
        }
}
